{
	"info": {
		"_postman_id": "04b5b3ff-ad92-4da7-a208-5fa2c795210a",
		"name": "ValidationTests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.ID).to.equals(100);\r",
							"    pm.expect(jsonData.UserName).to.equal(\"Test Name\");\r",
							"    pm.expect(jsonData.Password).to.equal(\"veryhardpassword\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"ID\": 100,\r\n\"UserName\": \"Test Name\",\r\n\"Password\": \"veryhardpassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{APPLICATION_URL}}/api/Users",
					"host": [
						"{{APPLICATION_URL}}"
					],
					"path": [
						"api",
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"ID\"  : { \"type\": \"number\" },\r",
							"        \"UserName\"    : { \"type\": \"string\" },\r",
							"        \"Password\"    : { \"type\": \"string\" }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('User schema is valid', function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const user = jsonData[0];\r",
							"    pm.expect(tv4.validate(user, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{APPLICATION_URL}}/api/Users",
					"host": [
						"{{APPLICATION_URL}}"
					],
					"path": [
						"api",
						"Users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Users By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"ID\"  : { \"type\": \"number\" },\r",
							"        \"UserName\"    : { \"type\": \"string\" },\r",
							"        \"Password\"    : { \"type\": \"string\" }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Status text contains user name\", function () {\r",
							"    const randomUserId = pm.globals.get(\"userId\");\r",
							"    pm.expect(pm.response.text()).to.include(\"User \" + randomUserId);\r",
							"});\r",
							"\r",
							"pm.test('User schema is valid', function () {\r",
							"    const user = pm.response.json();\r",
							"    pm.expect(tv4.validate(user, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const userId = Math.floor((Math.random()*10 +1));",
							"pm.globals.set(\"userId\", userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{APPLICATION_URL}}/api/Users/{{userId}}",
					"host": [
						"{{APPLICATION_URL}}"
					],
					"path": [
						"api",
						"Users",
						"{{userId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"ID\"  : { \"type\": \"number\" },\r",
							"        \"UserName\"    : { \"type\": \"string\" },\r",
							"        \"Password\"    : { \"type\": \"string\" }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.ID).to.equals(1);\r",
							"    pm.expect(jsonData.UserName).to.equal(\"Updated Name\");\r",
							"    pm.expect(jsonData.Password).to.equal(\"stillaverystrongpassword\");\r",
							"});\r",
							"\r",
							"pm.test('Schema is valid', function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"ID\": 1,\r\n    \"UserName\": \"Updated Name\",\r\n    \"Password\": \"stillaverystrongpassword\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{APPLICATION_URL}}/api/Users/1",
					"host": [
						"{{APPLICATION_URL}}"
					],
					"path": [
						"api",
						"Users",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const userId = Math.floor((Math.random()*10 +1));",
							"pm.globals.set(\"userId\", userId);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{APPLICATION_URL}}/api/Users/{{userId}}",
					"host": [
						"{{APPLICATION_URL}}"
					],
					"path": [
						"api",
						"Users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "APPLICATION_URL",
			"value": "https://web-appservice-lengyel.azurewebsites.net"
		}
	]
}